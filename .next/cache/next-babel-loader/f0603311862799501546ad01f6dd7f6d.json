{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Контент страницы с сообщениями\nimport { useReducer } from 'react';\nimport sendAjax from '../../Function/sendAjax';\nvar initialState = {\n  curentPage: 1,\n  messages: [],\n  countPage: 1,\n  countMessagesOnePage: 0\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'GET_MESSAGE_FROM_SERVER':\n      {\n        console.log(action.value);\n        return _objectSpread({}, action.value);\n      }\n\n    case 'SET_CURENT_PAGE':\n      return _objectSpread({}, state);\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nvar ContentMessages = function ContentMessages() {\n  var _useReducer = useReducer(reducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var upPage = function upPage() {};\n\n  var downPage = function downPage() {};\n\n  var setPage = function setPage(numPage) {};\n\n  var getMessagesFromServer = function getMessagesFromServer() {\n    var query = sendAjax('/getmessages', {\n      numberPage: state.curentPage - 1\n    });\n    query.subscribe(function (response) {\n      if (response.status === 200) {\n        var data = JSON.parse(response.response);\n        var count = data.count / data.countMessagesOnePage;\n        dispatch({\n          type: 'GET_MESSAGE_FROM_SERVER',\n          value: {\n            countPage: count > Math.floor(count) ? Math.floor(count) + 1 : Math.floor(count),\n            countMessagesOnePage: data.countMessagesOnePage,\n            messages: data.messages\n          }\n        });\n      }\n    }, function () {});\n  };\n\n  var buttonUp = state.curentPage == state.countPage ? null : __jsx(\"div\", {\n    className: \"upPage\",\n    onClick: upPage\n  }, \"+\");\n  var buttonDown = state.curentPage == 1 ? null : __jsx(\"div\", {\n    className: \"downPage\",\n    onClick: downPage\n  }, \"-\");\n  return __jsx(React.Fragment, null, __jsx(\"button\", {\n    onClick: function onClick() {\n      return getMessagesFromServer();\n    }\n  }, \"GET\"), __jsx(\"h1\", null, \"\\u0412\\u0441\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u044F\"), __jsx(\"div\", {\n    className: \"flipper\"\n  }, __jsx(\"p\", null, buttonDown, __jsx(\"input\", {\n    type: \"text\",\n    value: state.curentPage,\n    onChange: function onChange(_ref) {\n      var value = _ref.target.value;\n      return setPage(value);\n    }\n  }), ' ', \"/\", ' ', state.countPage, buttonUp), __jsx(\"table\", {\n    className: \"tebleMessages\"\n  }, __jsx(\"tr\", null, __jsx(\"th\", null, \"\\u0410\\u0432\\u0442\\u043E\\u0440\"), __jsx(\"th\", null, \"\\u041E\\u0431\\u0440\\u0430\\u0442\\u043D\\u044B\\u0439 \\u0430\\u0434\\u0440\\u0435\\u0441\"), __jsx(\"th\", null, \"\\u0414\\u0430\\u0442\\u0430\")), state.messages.map(function (item) {\n    return __jsx(\"tr\", {\n      className: !item.readed ? 'noReaded' : '',\n      onClick: function onClick() {}\n    }, __jsx(\"td\", null, item.autor), __jsx(\"td\", null, item.adress), __jsx(\"td\", null, item.date, __jsx(\"div\", {\n      className: \"ButtonDelete\",\n      onClick: function onClick() {},\n      idMessage: item.id\n    })));\n  }))));\n};\n\nexport default ContentMessages;","map":null,"metadata":{},"sourceType":"module"}