{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useReducer } from 'react';\nimport { createPortal } from 'react-dom';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'open':\n      return _objectSpread({}, state, {\n        visiblity: true,\n        props: action.props\n      });\n\n    case 'close':\n      return _objectSpread({}, state, {\n        visiblity: false\n      });\n\n    default:\n      throw new Error();\n  }\n};\n\nconst useModal = (WrapModal = () => __jsx(\"div\", null, __jsx(\"p\", null, \"useModal\")), parentNode = document === undefined ? undefined : document.querySelector('body')) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, {\n    visiblity: false,\n    props: {}\n  });\n\n  WrapModal.close = () => dispatch({\n    type: 'close'\n  });\n\n  const Modal = () => {\n    if (!state.visiblity || document === undefined) return null;\n    return createPortal(__jsx(WrapModal, state.props), parentNode);\n  };\n\n  return [Modal, (props = {}) => dispatch({\n    type: 'open',\n    props\n  }), () => dispatch({\n    type: 'close'\n  })];\n};\n\nuseModal.defaultProps = {\n  WpapModal: __jsx(\"div\", null, __jsx(\"p\", null, \"Hook useModal\")),\n  parentNode: null\n};\nexport default useModal;","map":null,"metadata":{},"sourceType":"module"}